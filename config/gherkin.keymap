/*
 * Copyright (c) 2025 pickme467
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/pointing.h>

&soft_off {
        hold-time-ms = <200>;
};

/ {
        macros {
                lm: lm {
                   compatible = "zmk,behavior-macro-two-param";
                   wait-ms = <0>;
                   tap-ms = <0>;
                   #binding-cells = <2>;
                   bindings
                       = <&macro_param_1to1>
                       , <&macro_press &mo MACRO_PLACEHOLDER>
                       , <&macro_param_2to1>
                       , <&macro_press &kp MACRO_PLACEHOLDER>
                       , <&macro_pause_for_release>
                       , <&macro_param_2to1>
                       , <&macro_release &kp MACRO_PLACEHOLDER>
                       , <&macro_param_1to1>
                       , <&macro_release &mo MACRO_PLACEHOLDER>
                       ;
               };
        };

        behaviors {
                td_layr: tap_dance_0 {
                   compatible = "zmk,behavior-tap-dance";
                   #binding-cells = <0>;
                   tapping-term-ms = <217>;
                   bindings = <&mo 1>, <&mo 2>, <&mo 3>, <&mo 5>;
                };
                qw_layr: tap_dance_1 {
                   compatible = "zmk,behavior-tap-dance";
                   #binding-cells = <0>;
                   tapping-term-ms = <217>;
                   bindings = <&mo 8>, <&mo 2>, <&mo 3>, <&mo 5>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
   &mt LSHFT SQT &mt LCTL COMMA &mt LALT DOT &mt LGUI P &kp Y    &kp F     &mt RGUI G &mt LALT C &mt LCTL R &mt RSHFT L
   &kp A         &kp O          &kp E        &kp U      &kp I    &kp D     &kp H      &kp T      &kp N      &kp S
   &kp SEMI      &kp Q          &lt 4 J      &kp K      &td_layr &kp SPACE &kp M      &kp W      &kp V      &kp Z
                        >;
                };

                number_layer {
                        bindings = <
   &kp BSLH &kp COMMA &kp DOT  &kp PIPE  &kp ASTRK &kp QMARK &kp N1    &kp N2 &kp N3 &kp N0
   &kp TAB  &kp EQUAL &kp PLUS &kp UNDER &kp MINUS &kp SLASH &kp N4    &kp N5 &kp N6 &kp BSPC
   &kp ESC  &none     &none    &kp X     &none     &kp B     &kp N7    &kp N8 &kp N9 &kp RET
                        >;
                };

                functions_layer {
                        bindings = <
   &kp F1   &kp F2   &kp F3       &kp F4     &kp F5        &kp F6   &kp F7    &kp F8    &kp F9  &kp F10
   &kp CAPS &kp SLCK &kp C_VOL_UP &kp C_MUTE &kp F11       &kp F12  &none     &kp PG_UP &none   &kp BSPC
   &none    &none    &kp C_VOL_DN &none      &none         &none    &kp HOME  &kp PG_DN &kp END &kp RET
                        >;
                };

                service_layer {
                        bindings = <
   &soft_off    &kp LCTL     &none        &sys_reset   &bootloader    &none &none &none  &none  &bt BT_CLR
   &none        &none        &none        &none        &none          &none &none &to 7  &to 6  &to 0
   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &none &none &none  &none  &none
                        >;
                };

                ralts_layer {
                        bindings = <
   &kp INS   &kp GRAVE &kp TILDE &kp LBKT &kp LT      &kp GT   &kp RBKT  &kp RA(C) &none     &kp RA(L)
   &kp RA(A) &kp RA(O) &kp RA(E) &kp LPAR &kp LBRC    &kp RBRC &kp RPAR  &kp UP    &kp RA(N) &kp RA(S)
   &kp DEL   &kp F8    &none     &kp F9   &kp RA(X)   &kp B    &kp LEFT  &kp DOWN  &kp RIGHT &kp RA(Z)
                        >;
                };

                mouse_layer {
                        bindings = <
   &none &none &none &mkp MB2 &none &none &none          &none          &none           &msc SCRL_UP
   &none &none &none &mkp MB1 &none &none &none          &mmv MOVE_UP   &none           &msc SCRL_DOWN
   &none &none &none &mkp MB3 &none &none &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &none
                        >;
                };

                game_layer {
                        bindings = <
   &kp SQT  &kp COMMA &kp DOT &kp P &kp Y    &kp F     &kp G &kp C &kp R &kp L
   &kp A    &kp O     &kp E   &kp U &kp I    &kp D     &kp H &kp T &kp N &kp S
   &kp SEMI &kp Q     &kp J   &kp K &td_layr &kp SPACE &kp M &kp W &kp V &kp Z
                        >;
                };

                qwerty_layer {
                        bindings = <
   &kp Q    &kp W     &kp E   &kp R &kp T    &kp Y     &kp U &kp I     &kp O   &kp P
   &kp A    &kp S     &kp D   &kp F &kp G    &kp H     &kp J &kp K     &kp L   &kp SEMI
   &kp Z    &kp X     &kp C   &kp V &qw_layr &kp SPACE &kp M &kp COMMA &kp DOT &kp SLASH
                        >;
                };

                qwerty_number_layer {
                        bindings = <
   &kp BSLH &kp COMMA &kp DOT  &kp PIPE  &kp ASTRK &kp QMARK &kp N1    &kp N2 &kp N3 &kp N0
   &kp TAB  &kp EQUAL &kp PLUS &kp UNDER &kp MINUS &kp SLASH &kp N4    &kp N5 &kp N6 &kp BSPC
   &kp ESC  &none     &none    &kp B     &none     &kp N     &kp N7    &kp N8 &kp N9 &kp RET
                        >;
                };
        };
};
